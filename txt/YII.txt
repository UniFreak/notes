#Best Practice
- 你可能会把自己的很多视图代码转化成小部件以提高重用，加快开发效率
- 入口脚本是定义全局常量的最好地方
- 有两种应用主体: web 和 console
- 启动太多的组件会降低系统性能
- 内联操作容易创建，在无需重用的情况下优先使用； 独立操作相反，主要用于多个控制器重用，或重构为扩展
- 如果你的控制器很复杂，通常意味着需要重构，转移一些代码到其他类中

#应用结构
##入口脚本(WEB 应用一般为 index.php, 控制台应用一般为 yii.php)
    // 定义全局常量
    defined('YII_DEBUG') or define('YII_DEBUG', true);
    defined('YII_ENV') or define('YII_ENV', 'dev');

    // 注册 Composer 自动加载器
    require(__DIR__ . '/../vendor/autoload.php');

    // 包含 Yii 类文件
    require(__DIR__ . '/../vendor/yiisoft/yii2/Yii.php');

    // 加载应用配置
    $config = require(__DIR__ . '/../config/web.php');

    // 创建、配置、运行一个应用
    (new yii\web\Application($config))->run();

##模型
    YII 实现了两种模型: 表单模型(CFormModel) 和 Active Record 模型(CActiveRecordModel)
    属性
        访问
            - $model->attr
            - $model['attr']
            - foreach ($model as $name => $value)
        定义
            - 直接在类中定义为公有属性
            - Model::attributes()
    属性标签
        访问: Model::getAttributeLabel()
        定义: Model::attributeLabels()
    场景
        Model::scenario
        Model::scenario()
    验证
        定义规则: Model::rules()
        执行验证: Model::validate()
    块赋值
        $model->attributes = \Yii::$app->request->post('ContactForm')
        安全属性
        非安全属性
    数据导出
        - Model::attributes
        - Model::toArray() (由 Model::field() 控制最终生成的数组)
视图
    渲染
        - Controller::render()
        - Controller::renderPartial()
        - Controller::renderAjax()
        - Controller::renderFile()

        - Widget::render()
        - Widget::renderFile()

        - View::render()
        - View::renderAjax()
        - View::renderFile()

        \Yii::$app->view
模块
过滤器
小部件
资源
扩展